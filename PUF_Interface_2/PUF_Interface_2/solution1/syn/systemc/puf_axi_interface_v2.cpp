// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "puf_axi_interface_v2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic puf_axi_interface_v2::ap_const_logic_1 = sc_dt::Log_1;
const int puf_axi_interface_v2::C_S_AXI_DATA_WIDTH = "100000";
const sc_logic puf_axi_interface_v2::ap_const_logic_0 = sc_dt::Log_0;
const bool puf_axi_interface_v2::ap_const_boolean_1 = true;

puf_axi_interface_v2::puf_axi_interface_v2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    puf_axi_interface_v2_AXILiteS_s_axi_U = new puf_axi_interface_v2_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("puf_axi_interface_v2_AXILiteS_s_axi_U");
    puf_axi_interface_v2_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    puf_axi_interface_v2_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    puf_axi_interface_v2_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    puf_axi_interface_v2_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    puf_axi_interface_v2_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    puf_axi_interface_v2_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    puf_axi_interface_v2_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    puf_axi_interface_v2_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    puf_axi_interface_v2_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    puf_axi_interface_v2_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    puf_axi_interface_v2_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    puf_axi_interface_v2_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    puf_axi_interface_v2_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    puf_axi_interface_v2_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ACLK(ap_clk);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ap_start(ap_start);
    puf_axi_interface_v2_AXILiteS_s_axi_U->interrupt(interrupt);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ap_ready(ap_ready);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ap_done(ap_done);
    puf_axi_interface_v2_AXILiteS_s_axi_U->ap_idle(ap_idle);
    puf_axi_interface_v2_AXILiteS_s_axi_U->challenge1axi_V(challenge1axi_V);
    puf_axi_interface_v2_AXILiteS_s_axi_U->challenge2axi_V(challenge2axi_V);
    puf_axi_interface_v2_AXILiteS_s_axi_U->responseaxi_V(responsein_V);
    puf_axi_interface_v2_AXILiteS_s_axi_U->responseaxi_V_ap_vld(responseaxi_V_ap_vld);
    puf_axi_interface_v2_AXILiteS_s_axi_U->tuneraxi_V(tuneraxi_V);
    puf_axi_interface_v2_AXILiteS_s_axi_U->output1axi_V(outputin1_V);
    puf_axi_interface_v2_AXILiteS_s_axi_U->output1axi_V_ap_vld(output1axi_V_ap_vld);
    puf_axi_interface_v2_AXILiteS_s_axi_U->output2axi_V(outputin2_V);
    puf_axi_interface_v2_AXILiteS_s_axi_U->output2axi_V_ap_vld(output2axi_V_ap_vld);
    puf_axi_interface_v2_AXILiteS_s_axi_U->startaxi_V(startaxi_V);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_challenge1in_V);
    sensitive << ( ap_start );
    sensitive << ( challenge1axi_V );

    SC_METHOD(thread_challenge1in_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_challenge2in_V);
    sensitive << ( ap_start );
    sensitive << ( challenge2axi_V );

    SC_METHOD(thread_challenge2in_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_output1axi_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_output2axi_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_responseaxi_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_startin_V);
    sensitive << ( ap_start );
    sensitive << ( startaxi_V );

    SC_METHOD(thread_startin_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_tuner_V);
    sensitive << ( ap_start );
    sensitive << ( tuneraxi_V );

    SC_METHOD(thread_tuner_V_ap_vld);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "puf_axi_interface_v2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, challenge1in_V, "(port)challenge1in_V");
    sc_trace(mVcdFile, challenge1in_V_ap_vld, "(port)challenge1in_V_ap_vld");
    sc_trace(mVcdFile, challenge2in_V, "(port)challenge2in_V");
    sc_trace(mVcdFile, challenge2in_V_ap_vld, "(port)challenge2in_V_ap_vld");
    sc_trace(mVcdFile, responsein_V, "(port)responsein_V");
    sc_trace(mVcdFile, tuner_V, "(port)tuner_V");
    sc_trace(mVcdFile, tuner_V_ap_vld, "(port)tuner_V_ap_vld");
    sc_trace(mVcdFile, outputin1_V, "(port)outputin1_V");
    sc_trace(mVcdFile, outputin2_V, "(port)outputin2_V");
    sc_trace(mVcdFile, startin_V, "(port)startin_V");
    sc_trace(mVcdFile, startin_V_ap_vld, "(port)startin_V_ap_vld");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, challenge1axi_V, "challenge1axi_V");
    sc_trace(mVcdFile, challenge2axi_V, "challenge2axi_V");
    sc_trace(mVcdFile, responseaxi_V_ap_vld, "responseaxi_V_ap_vld");
    sc_trace(mVcdFile, tuneraxi_V, "tuneraxi_V");
    sc_trace(mVcdFile, output1axi_V_ap_vld, "output1axi_V_ap_vld");
    sc_trace(mVcdFile, output2axi_V_ap_vld, "output2axi_V_ap_vld");
    sc_trace(mVcdFile, startaxi_V, "startaxi_V");
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
#endif

    }
    mHdltvinHandle.open("puf_axi_interface_v2.hdltvin.dat");
    mHdltvoutHandle.open("puf_axi_interface_v2.hdltvout.dat");
}

puf_axi_interface_v2::~puf_axi_interface_v2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete puf_axi_interface_v2_AXILiteS_s_axi_U;
}

void puf_axi_interface_v2::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void puf_axi_interface_v2::thread_ap_done() {
    ap_done = ap_start.read();
}

void puf_axi_interface_v2::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void puf_axi_interface_v2::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void puf_axi_interface_v2::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void puf_axi_interface_v2::thread_challenge1in_V() {
    challenge1in_V = challenge1axi_V.read();
}

void puf_axi_interface_v2::thread_challenge1in_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        challenge1in_V_ap_vld = ap_const_logic_1;
    } else {
        challenge1in_V_ap_vld = ap_const_logic_0;
    }
}

void puf_axi_interface_v2::thread_challenge2in_V() {
    challenge2in_V = challenge2axi_V.read();
}

void puf_axi_interface_v2::thread_challenge2in_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        challenge2in_V_ap_vld = ap_const_logic_1;
    } else {
        challenge2in_V_ap_vld = ap_const_logic_0;
    }
}

void puf_axi_interface_v2::thread_output1axi_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        output1axi_V_ap_vld = ap_const_logic_1;
    } else {
        output1axi_V_ap_vld = ap_const_logic_0;
    }
}

void puf_axi_interface_v2::thread_output2axi_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        output2axi_V_ap_vld = ap_const_logic_1;
    } else {
        output2axi_V_ap_vld = ap_const_logic_0;
    }
}

void puf_axi_interface_v2::thread_responseaxi_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        responseaxi_V_ap_vld = ap_const_logic_1;
    } else {
        responseaxi_V_ap_vld = ap_const_logic_0;
    }
}

void puf_axi_interface_v2::thread_startin_V() {
    startin_V = startaxi_V.read();
}

void puf_axi_interface_v2::thread_startin_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        startin_V_ap_vld = ap_const_logic_1;
    } else {
        startin_V_ap_vld = ap_const_logic_0;
    }
}

void puf_axi_interface_v2::thread_tuner_V() {
    tuner_V = tuneraxi_V.read();
}

void puf_axi_interface_v2::thread_tuner_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        tuner_V_ap_vld = ap_const_logic_1;
    } else {
        tuner_V_ap_vld = ap_const_logic_0;
    }
}

void puf_axi_interface_v2::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"challenge1in_V\" :  \"" << challenge1in_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"challenge1in_V_ap_vld\" :  \"" << challenge1in_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"challenge2in_V\" :  \"" << challenge2in_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"challenge2in_V_ap_vld\" :  \"" << challenge2in_V_ap_vld.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"responsein_V\" :  \"" << responsein_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tuner_V\" :  \"" << tuner_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"tuner_V_ap_vld\" :  \"" << tuner_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outputin1_V\" :  \"" << outputin1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outputin2_V\" :  \"" << outputin2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"startin_V\" :  \"" << startin_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"startin_V_ap_vld\" :  \"" << startin_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

