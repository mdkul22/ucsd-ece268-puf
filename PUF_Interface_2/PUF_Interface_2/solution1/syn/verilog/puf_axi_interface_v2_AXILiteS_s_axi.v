// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module puf_axi_interface_v2_AXILiteS_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 7,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    output wire [3:0]                    challenge1axi_V,
    output wire [3:0]                    challenge2axi_V,
    input  wire [7:0]                    responseaxi_V,
    input  wire                          responseaxi_V_ap_vld,
    output wire [4:0]                    tuneraxi_V,
    input  wire [7:0]                    output1axi_V,
    input  wire                          output1axi_V_ap_vld,
    input  wire [7:0]                    output2axi_V,
    input  wire                          output2axi_V_ap_vld,
    output wire [0:0]                    startaxi_V
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/SC)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        others - reserved
// 0x10 : Data signal of challenge1axi_V
//        bit 3~0 - challenge1axi_V[3:0] (Read/Write)
//        others  - reserved
// 0x14 : reserved
// 0x18 : Data signal of challenge2axi_V
//        bit 3~0 - challenge2axi_V[3:0] (Read/Write)
//        others  - reserved
// 0x1c : reserved
// 0x20 : Data signal of responseaxi_V
//        bit 7~0 - responseaxi_V[7:0] (Read)
//        others  - reserved
// 0x24 : Control signal of responseaxi_V
//        bit 0  - responseaxi_V_ap_vld (Read/COR)
//        others - reserved
// 0x28 : Data signal of tuneraxi_V
//        bit 4~0 - tuneraxi_V[4:0] (Read/Write)
//        others  - reserved
// 0x2c : reserved
// 0x30 : Data signal of output1axi_V
//        bit 7~0 - output1axi_V[7:0] (Read)
//        others  - reserved
// 0x34 : Control signal of output1axi_V
//        bit 0  - output1axi_V_ap_vld (Read/COR)
//        others - reserved
// 0x38 : Data signal of output2axi_V
//        bit 7~0 - output2axi_V[7:0] (Read)
//        others  - reserved
// 0x3c : Control signal of output2axi_V
//        bit 0  - output2axi_V_ap_vld (Read/COR)
//        others - reserved
// 0x40 : Data signal of startaxi_V
//        bit 0  - startaxi_V[0] (Read/Write)
//        others - reserved
// 0x44 : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                = 7'h00,
    ADDR_GIE                    = 7'h04,
    ADDR_IER                    = 7'h08,
    ADDR_ISR                    = 7'h0c,
    ADDR_CHALLENGE1AXI_V_DATA_0 = 7'h10,
    ADDR_CHALLENGE1AXI_V_CTRL   = 7'h14,
    ADDR_CHALLENGE2AXI_V_DATA_0 = 7'h18,
    ADDR_CHALLENGE2AXI_V_CTRL   = 7'h1c,
    ADDR_RESPONSEAXI_V_DATA_0   = 7'h20,
    ADDR_RESPONSEAXI_V_CTRL     = 7'h24,
    ADDR_TUNERAXI_V_DATA_0      = 7'h28,
    ADDR_TUNERAXI_V_CTRL        = 7'h2c,
    ADDR_OUTPUT1AXI_V_DATA_0    = 7'h30,
    ADDR_OUTPUT1AXI_V_CTRL      = 7'h34,
    ADDR_OUTPUT2AXI_V_DATA_0    = 7'h38,
    ADDR_OUTPUT2AXI_V_CTRL      = 7'h3c,
    ADDR_STARTAXI_V_DATA_0      = 7'h40,
    ADDR_STARTAXI_V_CTRL        = 7'h44,
    WRIDLE                      = 2'd0,
    WRDATA                      = 2'd1,
    WRRESP                      = 2'd2,
    WRRESET                     = 2'd3,
    RDIDLE                      = 2'd0,
    RDDATA                      = 2'd1,
    RDRESET                     = 2'd2,
    ADDR_BITS         = 7;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    reg                           int_ap_start = 1'b0;
    reg                           int_auto_restart = 1'b0;
    reg                           int_gie = 1'b0;
    reg                           int_ier = 1'b0;
    reg                           int_isr = 1'b0;
    reg  [3:0]                    int_challenge1axi_V = 'b0;
    reg  [3:0]                    int_challenge2axi_V = 'b0;
    reg  [7:0]                    int_responseaxi_V = 'b0;
    reg                           int_responseaxi_V_ap_vld;
    reg  [4:0]                    int_tuneraxi_V = 'b0;
    reg  [7:0]                    int_output1axi_V = 'b0;
    reg                           int_output1axi_V_ap_vld;
    reg  [7:0]                    int_output2axi_V = 'b0;
    reg                           int_output2axi_V_ap_vld;
    reg  [0:0]                    int_startaxi_V = 'b0;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_CHALLENGE1AXI_V_DATA_0: begin
                    rdata <= int_challenge1axi_V[3:0];
                end
                ADDR_CHALLENGE2AXI_V_DATA_0: begin
                    rdata <= int_challenge2axi_V[3:0];
                end
                ADDR_RESPONSEAXI_V_DATA_0: begin
                    rdata <= int_responseaxi_V[7:0];
                end
                ADDR_RESPONSEAXI_V_CTRL: begin
                    rdata[0] <= int_responseaxi_V_ap_vld;
                end
                ADDR_TUNERAXI_V_DATA_0: begin
                    rdata <= int_tuneraxi_V[4:0];
                end
                ADDR_OUTPUT1AXI_V_DATA_0: begin
                    rdata <= int_output1axi_V[7:0];
                end
                ADDR_OUTPUT1AXI_V_CTRL: begin
                    rdata[0] <= int_output1axi_V_ap_vld;
                end
                ADDR_OUTPUT2AXI_V_DATA_0: begin
                    rdata <= int_output2axi_V[7:0];
                end
                ADDR_OUTPUT2AXI_V_CTRL: begin
                    rdata[0] <= int_output2axi_V_ap_vld;
                end
                ADDR_STARTAXI_V_DATA_0: begin
                    rdata <= int_startaxi_V[0:0];
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign interrupt       = int_gie & (|int_isr);
assign ap_start        = int_ap_start;
assign challenge1axi_V = int_challenge1axi_V;
assign challenge2axi_V = int_challenge2axi_V;
assign tuneraxi_V      = int_tuneraxi_V;
assign startaxi_V      = int_startaxi_V;
// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (ap_done & int_auto_restart)
            int_ap_start <= 1'b1; // auto restart
        else
            int_ap_start <= 1'b0; // self clear
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_ap_idle
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_idle <= ap_idle;
    end
end

// int_ap_ready
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else if (ACLK_EN) begin
            int_ap_ready <= ap_ready;
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[0];
    end
end

// int_isr
always @(posedge ACLK) begin
    if (ARESET)
        int_isr <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier & ap_done)
            int_isr <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr <= int_isr ^ WDATA[0]; // toggle on write
    end
end

// int_challenge1axi_V[3:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_challenge1axi_V[3:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CHALLENGE1AXI_V_DATA_0)
            int_challenge1axi_V[3:0] <= (WDATA[31:0] & wmask) | (int_challenge1axi_V[3:0] & ~wmask);
    end
end

// int_challenge2axi_V[3:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_challenge2axi_V[3:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CHALLENGE2AXI_V_DATA_0)
            int_challenge2axi_V[3:0] <= (WDATA[31:0] & wmask) | (int_challenge2axi_V[3:0] & ~wmask);
    end
end

// int_responseaxi_V
always @(posedge ACLK) begin
    if (ARESET)
        int_responseaxi_V <= 0;
    else if (ACLK_EN) begin
        if (responseaxi_V_ap_vld)
            int_responseaxi_V <= responseaxi_V;
    end
end

// int_responseaxi_V_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_responseaxi_V_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (responseaxi_V_ap_vld)
            int_responseaxi_V_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_RESPONSEAXI_V_CTRL)
            int_responseaxi_V_ap_vld <= 1'b0; // clear on read
    end
end

// int_tuneraxi_V[4:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_tuneraxi_V[4:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_TUNERAXI_V_DATA_0)
            int_tuneraxi_V[4:0] <= (WDATA[31:0] & wmask) | (int_tuneraxi_V[4:0] & ~wmask);
    end
end

// int_output1axi_V
always @(posedge ACLK) begin
    if (ARESET)
        int_output1axi_V <= 0;
    else if (ACLK_EN) begin
        if (output1axi_V_ap_vld)
            int_output1axi_V <= output1axi_V;
    end
end

// int_output1axi_V_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_output1axi_V_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (output1axi_V_ap_vld)
            int_output1axi_V_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_OUTPUT1AXI_V_CTRL)
            int_output1axi_V_ap_vld <= 1'b0; // clear on read
    end
end

// int_output2axi_V
always @(posedge ACLK) begin
    if (ARESET)
        int_output2axi_V <= 0;
    else if (ACLK_EN) begin
        if (output2axi_V_ap_vld)
            int_output2axi_V <= output2axi_V;
    end
end

// int_output2axi_V_ap_vld
always @(posedge ACLK) begin
    if (ARESET)
        int_output2axi_V_ap_vld <= 1'b0;
    else if (ACLK_EN) begin
        if (output2axi_V_ap_vld)
            int_output2axi_V_ap_vld <= 1'b1;
        else if (ar_hs && raddr == ADDR_OUTPUT2AXI_V_CTRL)
            int_output2axi_V_ap_vld <= 1'b0; // clear on read
    end
end

// int_startaxi_V[0:0]
always @(posedge ACLK) begin
    if (ARESET)
        int_startaxi_V[0:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_STARTAXI_V_DATA_0)
            int_startaxi_V[0:0] <= (WDATA[31:0] & wmask) | (int_startaxi_V[0:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------

endmodule
