-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity puf_axi_interface_v2 is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    challenge1in_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    challenge1in_V_ap_vld : OUT STD_LOGIC;
    challenge2in_V : OUT STD_LOGIC_VECTOR (3 downto 0);
    challenge2in_V_ap_vld : OUT STD_LOGIC;
    responsein_V : IN STD_LOGIC_VECTOR (7 downto 0);
    tuner_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    tuner_V_ap_vld : OUT STD_LOGIC;
    outputin1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    outputin2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    startin_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    startin_V_ap_vld : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of puf_axi_interface_v2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "puf_axi_interface_v2,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=116,HLS_SYN_LUT=116}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal challenge1axi_V : STD_LOGIC_VECTOR (3 downto 0);
    signal challenge2axi_V : STD_LOGIC_VECTOR (3 downto 0);
    signal responseaxi_V_ap_vld : STD_LOGIC;
    signal tuneraxi_V : STD_LOGIC_VECTOR (4 downto 0);
    signal output1axi_V_ap_vld : STD_LOGIC;
    signal output2axi_V_ap_vld : STD_LOGIC;
    signal startaxi_V : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;

    component puf_axi_interface_v2_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        challenge1axi_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        challenge2axi_V : OUT STD_LOGIC_VECTOR (3 downto 0);
        responseaxi_V : IN STD_LOGIC_VECTOR (7 downto 0);
        responseaxi_V_ap_vld : IN STD_LOGIC;
        tuneraxi_V : OUT STD_LOGIC_VECTOR (4 downto 0);
        output1axi_V : IN STD_LOGIC_VECTOR (7 downto 0);
        output1axi_V_ap_vld : IN STD_LOGIC;
        output2axi_V : IN STD_LOGIC_VECTOR (7 downto 0);
        output2axi_V_ap_vld : IN STD_LOGIC;
        startaxi_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    puf_axi_interface_v2_AXILiteS_s_axi_U : component puf_axi_interface_v2_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        challenge1axi_V => challenge1axi_V,
        challenge2axi_V => challenge2axi_V,
        responseaxi_V => responsein_V,
        responseaxi_V_ap_vld => responseaxi_V_ap_vld,
        tuneraxi_V => tuneraxi_V,
        output1axi_V => outputin1_V,
        output1axi_V_ap_vld => output1axi_V_ap_vld,
        output2axi_V => outputin2_V,
        output2axi_V_ap_vld => output2axi_V_ap_vld,
        startaxi_V => startaxi_V);




    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    challenge1in_V <= challenge1axi_V;

    challenge1in_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            challenge1in_V_ap_vld <= ap_const_logic_1;
        else 
            challenge1in_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    challenge2in_V <= challenge2axi_V;

    challenge2in_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            challenge2in_V_ap_vld <= ap_const_logic_1;
        else 
            challenge2in_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output1axi_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            output1axi_V_ap_vld <= ap_const_logic_1;
        else 
            output1axi_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output2axi_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            output2axi_V_ap_vld <= ap_const_logic_1;
        else 
            output2axi_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    responseaxi_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            responseaxi_V_ap_vld <= ap_const_logic_1;
        else 
            responseaxi_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    startin_V <= startaxi_V;

    startin_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            startin_V_ap_vld <= ap_const_logic_1;
        else 
            startin_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tuner_V <= tuneraxi_V;

    tuner_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            tuner_V_ap_vld <= ap_const_logic_1;
        else 
            tuner_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
