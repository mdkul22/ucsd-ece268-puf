#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("challenge1in_V", 4, hls_out, 11, "ap_vld", "out_data", 1),
	Port_Property("challenge1in_V_ap_vld", 1, hls_out, 11, "ap_vld", "out_vld", 1),
	Port_Property("challenge2in_V", 4, hls_out, 12, "ap_vld", "out_data", 1),
	Port_Property("challenge2in_V_ap_vld", 1, hls_out, 12, "ap_vld", "out_vld", 1),
	Port_Property("responsein_V", 8, hls_in, 13, "ap_none", "in_data", 1),
	Port_Property("tuner_top_1_V", 32, hls_out, 14, "ap_vld", "out_data", 1),
	Port_Property("tuner_top_1_V_ap_vld", 1, hls_out, 14, "ap_vld", "out_vld", 1),
	Port_Property("tuner_top_2_V", 32, hls_out, 15, "ap_vld", "out_data", 1),
	Port_Property("tuner_top_2_V_ap_vld", 1, hls_out, 15, "ap_vld", "out_vld", 1),
	Port_Property("tuner_top_3_V", 32, hls_out, 16, "ap_vld", "out_data", 1),
	Port_Property("tuner_top_3_V_ap_vld", 1, hls_out, 16, "ap_vld", "out_vld", 1),
	Port_Property("tuner_top_4_V", 32, hls_out, 17, "ap_vld", "out_data", 1),
	Port_Property("tuner_top_4_V_ap_vld", 1, hls_out, 17, "ap_vld", "out_vld", 1),
	Port_Property("tuner_btm_1_V", 32, hls_out, 18, "ap_vld", "out_data", 1),
	Port_Property("tuner_btm_1_V_ap_vld", 1, hls_out, 18, "ap_vld", "out_vld", 1),
	Port_Property("tuner_btm_2_V", 32, hls_out, 19, "ap_vld", "out_data", 1),
	Port_Property("tuner_btm_2_V_ap_vld", 1, hls_out, 19, "ap_vld", "out_vld", 1),
	Port_Property("tuner_btm_3_V", 32, hls_out, 20, "ap_vld", "out_data", 1),
	Port_Property("tuner_btm_3_V_ap_vld", 1, hls_out, 20, "ap_vld", "out_vld", 1),
	Port_Property("tuner_btm_4_V", 32, hls_out, 21, "ap_vld", "out_data", 1),
	Port_Property("tuner_btm_4_V_ap_vld", 1, hls_out, 21, "ap_vld", "out_vld", 1),
	Port_Property("outputin1_V", 8, hls_in, 24, "ap_none", "in_data", 1),
	Port_Property("outputin2_V", 8, hls_in, 25, "ap_none", "in_data", 1),
	Port_Property("startin_V", 1, hls_out, 26, "ap_vld", "out_data", 1),
	Port_Property("startin_V_ap_vld", 1, hls_out, 26, "ap_vld", "out_vld", 1),
	Port_Property("s_axi_AXILiteS_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_AWADDR", 7, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_ARADDR", 7, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_AXILiteS_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "long_puf_axi_interface";
