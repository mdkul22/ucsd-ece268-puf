// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="puf_axi_interface,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=151,HLS_SYN_LUT=186}" *)

module puf_axi_interface (
        challenge1in_V,
        challenge1in_V_ap_vld,
        challenge2in_V,
        challenge2in_V_ap_vld,
        responsein_V,
        tuner_V,
        tuner_V_ap_vld,
        outputin1_V,
        outputin2_V,
        startin_V,
        startin_V_ap_vld,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt
);

parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output  [3:0] challenge1in_V;
output   challenge1in_V_ap_vld;
output  [3:0] challenge2in_V;
output   challenge2in_V_ap_vld;
input  [7:0] responsein_V;
output  [39:0] tuner_V;
output   tuner_V_ap_vld;
input  [7:0] outputin1_V;
input  [7:0] outputin2_V;
output  [0:0] startin_V;
output   startin_V_ap_vld;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;

reg challenge1in_V_ap_vld;
reg challenge2in_V_ap_vld;
reg tuner_V_ap_vld;
reg startin_V_ap_vld;

wire    ap_start;
wire    ap_done;
wire    ap_idle;
wire    ap_ready;
wire   [3:0] challenge1axi_V;
wire   [3:0] challenge2axi_V;
reg    responseaxi_V_ap_vld;
wire   [39:0] tuneraxi_V;
reg    output1axi_V_ap_vld;
reg    output2axi_V_ap_vld;
wire   [0:0] startaxi_V;
reg    ap_rst_n_inv;

puf_axi_interface_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
puf_axi_interface_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .challenge1axi_V(challenge1axi_V),
    .challenge2axi_V(challenge2axi_V),
    .responseaxi_V(responsein_V),
    .responseaxi_V_ap_vld(responseaxi_V_ap_vld),
    .tuneraxi_V(tuneraxi_V),
    .output1axi_V(outputin1_V),
    .output1axi_V_ap_vld(output1axi_V_ap_vld),
    .output2axi_V(outputin2_V),
    .output2axi_V_ap_vld(output2axi_V_ap_vld),
    .startaxi_V(startaxi_V)
);

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        challenge1in_V_ap_vld = 1'b1;
    end else begin
        challenge1in_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        challenge2in_V_ap_vld = 1'b1;
    end else begin
        challenge2in_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        output1axi_V_ap_vld = 1'b1;
    end else begin
        output1axi_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        output2axi_V_ap_vld = 1'b1;
    end else begin
        output2axi_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        responseaxi_V_ap_vld = 1'b1;
    end else begin
        responseaxi_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        startin_V_ap_vld = 1'b1;
    end else begin
        startin_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b1)) begin
        tuner_V_ap_vld = 1'b1;
    end else begin
        tuner_V_ap_vld = 1'b0;
    end
end

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign challenge1in_V = challenge1axi_V;

assign challenge2in_V = challenge2axi_V;

assign startin_V = startaxi_V;

assign tuner_V = tuneraxi_V;

endmodule //puf_axi_interface
